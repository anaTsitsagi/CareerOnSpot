@using System.Globalization
@using Microsoft.Extensions.Localization
@inherits LayoutComponentBase

@page "/services/it-strategy"
@inject NavigationManager Nav
@inject IStringLocalizer<ITStrategy> L

<div class="max-w-6xl mx-auto mb-16 px-2 sm:px-6 pt-12">
    <!-- Back button -->
    <button class="text-accent1 mb-6 block px-4 py-2 rounded border border-accent1
                   hover:bg-accent1 hover:text-white transition"
            @onclick="GoBack">
        @L["BackButtonText"]
    </button>
    <!-- Page title -->
    <h1 class="text-3xl font-bold mb-4">@L["PageTitle"]</h1>

    <!-- Intro Description -->
    <div class="mb-8">
        <h2 class="text-xl font-semibold mb-2">@L["Intro_Heading"]</h2>
        <ul class="list-disc list-inside text-gray-700 space-y-1 text-lg">
            <li>@L["Intro_Point1"]</li>
            <li>@L["Intro_Point2"]</li>
            <li>@L["Intro_Point3"]</li>
        </ul>
    </div>

    <!-- Accordion of steps -->
    <div class="space-y-4">
        @foreach (var (step, idx) in Steps.Select((s, i) => (s, i)))
        {
            var num = idx + 1;
            <div class="border border-gray-200 rounded-lg overflow-hidden">
                <button class="w-full flex items-center justify-between px-4 py-3 bg-gray-100 hover:bg-gray-200 transition"
                        @onclick="() => Toggle(step)">
                    <div class="flex items-center space-x-3">
                        <div class="flex items-center justify-center w-8 h-8 rounded-full bg-accent1 text-white font-bold">
                            @num
                        </div>
                        <span class="font-medium">@step.Title</span>
                    </div>
                    <svg class="w-5 h-5 transform @(step.IsExpanded ? "rotate-180" : "") transition-transform"
                         fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round"
                              d="M19 9l-7 7-7-7" />
                    </svg>
                </button>

                @if (step.IsExpanded)
                {
                    <div class="px-6 py-4 bg-white">
                        <ul class="list-disc list-inside text-gray-700 space-y-2 text-base">
                            @foreach (var detail in step.Details)
                            {
                                <li>@detail</li>
                            }
                        </ul>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    void GoBack() => Nav.NavigateTo("/services");

    class Step
    {
        public string Title { get; set; }
        public List<string> Details { get; set; }
        public bool IsExpanded { get; set; }
    }

    List<Step> Steps;

    protected override void OnInitialized()
    {
        Steps = new()
        {
            new Step {
                Title   = L["Step1_Title"],
                Details = new() {
                    L["Step1_Point1"],
                    L["Step1_Point2"],
                    L["Step1_Point3"],
                    L["Step1_Point4"]
                }
            },
            new Step {
                Title   = L["Step2_Title"],
                Details = new() {
                    L["Step2_Point1"],
                    L["Step2_Point2"],
                    L["Step2_Point3"],
                    L["Step2_Point4"]
                }
            },
            new Step {
                Title   = L["Step3_Title"],
                Details = new() {
                    L["Step3_Point1"],
                    L["Step3_Point2"],
                    L["Step3_Point3"],
                    L["Step3_Point4"]
                }
            },
            new Step {
                Title   = L["Step4_Title"],
                Details = new() {
                    L["Step4_Point1"],
                    L["Step4_Point2"],
                    L["Step4_Point3"],
                    L["Step4_Point4"]
                }
            }
        };
    }

    void Toggle(Step step) => step.IsExpanded = !step.IsExpanded;
}
